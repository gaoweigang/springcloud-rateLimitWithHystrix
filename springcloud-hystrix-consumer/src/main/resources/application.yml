spring:
  application:
    name: service-consumer

server:
  port: 8763

eureka:
  instance:
    hostname: localhost
    lease-expiration-duration-in-seconds: 30
    lease-renewal-interval-in-seconds: 30
  client:
    registerWithEureka: false
    fetchRegistry: true
    serviceUrl:
            defaultZone: http://localhost:8761/eureka/
  #server:
    #enable-self-preservation: false

##开启hystrix，hystrix里面的功能有限流，降级，熔断
feign:
  #开启feign使用hystrix,Spring Cloud默认已经为Feign整合了Hystrix，我们只需要开启
  hystrix:
    enabled: true

#在这里为了方便测试超时熔断处理，如果不添加很难测试，因为会抛出Read timed out
ribbon:
  #请求处理的超时时间，指的是建立连接后从服务器读取到可用资源所用的时间， Eureka服务调用方从Eureka服务提供方读资源的时间
  ReadTimeout: 60000
  #请求连接的超时时间,Eureka客户端服务提供方与Eureka客户端服务调用方建立连接所用时间
  ConnectTimeout: 60000

hystrix:
  #设置全局超时时间为10秒，还可以针对单个方法
  command.default.execution.isolation.thread.timeoutInMilliseconds: 2000
  #####服务降级配置######################
  #降级配置，当执行失败（run方法抛异常）或者请求被拒绝（资源不足），是否会尝试调用hystrixCommand.getFallback() 。默认为true
  command.default.fallback.enabled: true
  #####熔断配置，测试客户端熔断#########################
  #在这里仅测试降级，关闭熔断
  command.default.circuitBreaker.enabled: true
  #10s内请求失败数量达到20个，断路器开。
  command.default.circuitBreaker.requestVolumeThreshold: 5
  #短路多久以后开始尝试是否恢复，默认5s, 注意：时间单位是毫秒
  command.default.circuitBreaker.sleepWindowInMilliseconds: 60000
  #出错百分比阈值，当达到此阈值后，开始短路。默认50%
  command.default.circuitBreaker.errorThresholdPercentage: 50
  #####限流配置#########################
  threadpool.default:
      #最大线程数决定了Eureka客户端提供的服务能处理的请求个数，超过的请求可通过熔断降级， 模拟两个请求同时访问
      #核心线程数，当核心线程不够用的时候会创建新线程，但不会超过最大线程数
      coreSize: 1
      #当核心线程不够用的时候，超过了最大线程数之后的请求会被hystrix降级处理，即调用hystrxi中的fallback属性指定的降级方法。如果没有指定降级方法，则会默认返回null
      maximumSize: 1
      #要使用maximumSize，则必须配置次参数
      allowMaximumSizeToDivergeFromCoreSize: true
